{"version":3,"sources":["../src/remap.js"],"names":["require","CoverageTransformer","remap","coverage","options","smc","Array","isArray","forEach","addCoverage","item","getFinalCoverage","module","exports"],"mappings":";;eAAgCA,QAAQ,uBAAR,C;IAAxBC,mB,YAAAA,mB;;AAER;;;;;;;;;;;;;;;;;;;;;;AAoBA,SAASC,KAAT,CAAeC,QAAf,EAAuC;AAAA,MAAdC,OAAc,uEAAJ,EAAI;;AACtC,MAAMC,MAAM,IAAIJ,mBAAJ,CAAwBG,OAAxB,CAAZ;;AAEA,MAAI,CAACE,MAAMC,OAAN,CAAcJ,QAAd,CAAL,EAA8B;AAC7BA,eAAW,CAACA,QAAD,CAAX;AACA;;AAEDA,WAASK,OAAT,CAAiB,gBAAQ;AACxBH,QAAII,WAAJ,CAAgBC,IAAhB;AACA,GAFD;;AAIA,SAAOL,IAAIM,gBAAJ,EAAP;AACA;;AAEDC,OAAOC,OAAP,GAAiBX,KAAjB","file":"remap.js","sourcesContent":["const { CoverageTransformer } = require('./CoverageTransformer');\n\n/**\n * Remaps coverage data based on the source maps it discovers in the\n * covered files and returns a coverage Collector that contains the remappped\n * data.\n * @param  {Array|Object} coverage The coverage (or array of coverages) that need to be\n *                                 remapped\n * @param  {Object} options A configuration object:\n *                              basePath? - a string containing to utilise as the base path\n *                                          for determining the location of the source file\n *                              exclude?  - a string or Regular Expression that filters out\n *                                          any coverage where the file path matches\n *                              readFile? - a function that can read a file\n *                                          syncronously\n *                              readJSON? - a function that can read and parse a\n *                                          JSON file syncronously\n *                              sources?  - a Istanbul store where inline sources will be\n *                                          added\n *                              warn?     - a function that logs warnings\n * @return {istanbul/lib/_collector}         The remapped collector\n */\nfunction remap(coverage, options = {}) {\n\tconst smc = new CoverageTransformer(options);\n\n\tif (!Array.isArray(coverage)) {\n\t\tcoverage = [coverage];\n\t}\n\n\tcoverage.forEach(item => {\n\t\tsmc.addCoverage(item);\n\t});\n\n\treturn smc.getFinalCoverage();\n}\n\nmodule.exports = remap;\n"]}