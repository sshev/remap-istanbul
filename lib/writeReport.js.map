{"version":3,"sources":["../src/writeReport.js"],"names":["require","istanbulReportTypes","clover","cobertura","html","json","lcovonly","teamcity","text","module","exports","writeReport","collector","reportType","reportOptions","dest","sources","resolve","reject","SyntaxError","Reporter","options","file","dir","log","console","Error","sourceStore","reporter"],"mappings":";;;;;;;;;;;;AAAAA,QAAQ,gBAAR;;AAEA,IAAMC,sBAAsB;AAC3BC,SAAQ,MADmB;AAE3BC,YAAW,MAFgB;AAG3BC,OAAM,WAHqB;AAI3B,iBAAgB,MAJW;AAK3BC,OAAM,MALqB;AAM3BC,WAAU,MANiB;AAO3BC,WAAU,MAPiB;AAQ3B,cAAa,SARc;AAS3B,iBAAgB,MATW;AAU3BC,OAAM;AAVqB,CAA5B;;AAaA;;;;;;;;;;;;;;;AAeAC,OAAOC,OAAP,GAAiB,SAASC,WAAT,CAAqBC,SAArB,EAAgCC,UAAhC,EAA4CC,aAA5C,EAA2DC,IAA3D,EAAiEC,OAAjE,EAA0E;AAC1F,QAAO,sBAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvC,MAAI,EAAEL,cAAcZ,mBAAhB,CAAJ,EAA0C;AACzCiB,UAAO,IAAIC,WAAJ,mCAAgDN,UAAhD,QAAP;AACA;AACA;AACD,MAAMO,WAAWpB,iCAA+Ba,UAA/B,CAAjB;AACA,MAAMQ,UAAU,sBAAc,EAAd,EAAkBP,aAAlB,CAAhB;AACA,UAAQb,oBAAoBY,UAApB,CAAR;AACC,QAAK,MAAL;AACCQ,YAAQC,IAAR,GAAeP,IAAf;AACA;AACD,QAAK,WAAL;AACCM,YAAQE,GAAR,GAAcR,IAAd;AACA;AACD,QAAK,SAAL;AACCM,YAAQG,GAAR,GAAcT,QAAQU,QAAQD,GAA9B;AACA;AACD;AACC,UAAM,IAAIE,KAAJ,CAAU,uBAAV,CAAN;AAXF;AAaA,MAAIV,OAAJ,EAAa;AACZK,WAAQM,WAAR,GAAsBX,OAAtB;AACA;AACD,MAAMY,WAAW,IAAIR,QAAJ,CAAaC,OAAb,CAAjB;AACAJ,UAAQW,SAASjB,WAAT,CAAqBC,SAArB,EAAgC,IAAhC,CAAR;AACA,EAzBM,CAAP;AA0BA,CA3BD","file":"writeReport.js","sourcesContent":["require('istanbul/index');\n\nconst istanbulReportTypes = {\n\tclover: 'file',\n\tcobertura: 'file',\n\thtml: 'directory',\n\t'json-summary': 'file',\n\tjson: 'file',\n\tlcovonly: 'file',\n\tteamcity: 'file',\n\t'text-lcov': 'console',\n\t'text-summary': 'file',\n\ttext: 'file',\n};\n\n/**\n * Generates an Instanbul Coverage report based on the information passed.\n * @param  {istanbul/lib/_collector} collector  An instance of an coverage\n *                                             collector\n * @param  {string}          reportType    The name of the report type to\n *                                         generate\n * @param  {object}       reportOptions The options to pass to the reporter\n * @param  {string|function} dest          The filename or outputting\n *                                         function to use for generating\n *                                         the report\n * @param  {istanbul/lib/store} sources?   A store of sources to be passed\n *                                         the reporter\n * @return {Promise}                       A promise that resolves when the\n *                                         report is complete.\n */\nmodule.exports = function writeReport(collector, reportType, reportOptions, dest, sources) {\n\treturn new Promise((resolve, reject) => {\n\t\tif (!(reportType in istanbulReportTypes)) {\n\t\t\treject(new SyntaxError(`Unrecognized report type of \"${reportType}\".`));\n\t\t\treturn;\n\t\t}\n\t\tconst Reporter = require(`istanbul/lib/report/${reportType}`);\n\t\tconst options = Object.assign({}, reportOptions);\n\t\tswitch (istanbulReportTypes[reportType]) {\n\t\t\tcase 'file':\n\t\t\t\toptions.file = dest;\n\t\t\t\tbreak;\n\t\t\tcase 'directory':\n\t\t\t\toptions.dir = dest;\n\t\t\t\tbreak;\n\t\t\tcase 'console':\n\t\t\t\toptions.log = dest || console.log;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Unknown reporter type');\n\t\t}\n\t\tif (sources) {\n\t\t\toptions.sourceStore = sources;\n\t\t}\n\t\tconst reporter = new Reporter(options);\n\t\tresolve(reporter.writeReport(collector, true));\n\t});\n};\n"]}