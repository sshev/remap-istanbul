{"version":3,"sources":["../src/gruntRemapIstanbul.js"],"names":["loadCoverage","require","remap","writeReport","MemoryStore","module","exports","grunt","registerMultiTask","done","async","options","sources","p","warn","message","fail","log","error","files","forEach","file","coverage","src","readJSON","readFile","basePath","useAbsolutePaths","exclude","map","length","undefined","type","dest","push","concat","reports","key","reportOpts","all","then","fatal"],"mappings":";;;;;;;;;;;;AAAA;AACA;;AAEA,IAAMA,eAAeC,QAAQ,gBAAR,CAArB;AACA,IAAMC,QAAQD,QAAQ,SAAR,CAAd;AACA,IAAME,cAAcF,QAAQ,eAAR,CAApB;AACA,IAAMG,cAAcH,QAAQ,2BAAR,CAApB;;AAEAI,OAAOC,OAAP,GAAiB,UAAUC,KAAV,EAAiB;AACjCA,OAAMC,iBAAN,CAAwB,eAAxB,EAAyC,YAAY;AACpD,MAAMC,OAAO,KAAKC,KAAL,EAAb;AACA,MAAMC,UAAU,KAAKA,OAAL,EAAhB;AACA,MAAIC,UAAU,IAAIR,WAAJ,EAAd;AACA,MAAIS,IAAI,EAAR;;AAEA,WAASC,IAAT,CAAcC,OAAd,EAAuB;AACtB,OAAIJ,QAAQK,IAAZ,EAAkB;AACjBT,UAAMS,IAAN,CAAWF,IAAX,CAAgBC,OAAhB;AACA,IAFD,MAEO;AACNR,UAAMU,GAAN,CAAUC,KAAV,CAAgBH,OAAhB;AACA;AACD;;AAED,OAAKI,KAAL,CAAWC,OAAX,CAAmB,UAACC,IAAD,EAAU;AAC5B,OAAMC,WAAWpB,MAAMF,aAAaqB,KAAKE,GAAlB,EAAuB;AAC7CC,cAAUjB,MAAMiB,QAD6B;AAE7CV;AAF6C,IAAvB,CAAN,EAGb;AACHW,cAAUlB,MAAMkB,QADb;AAEHD,cAAUjB,MAAMiB,QAFb;AAGHV,cAHG;AAIHF,oBAJG;AAKHc,cAAUL,KAAKK,QALZ;AAMHC,sBAAkBhB,QAAQgB,gBANvB;AAOHC,aAASjB,QAAQiB;AAPd,IAHa,CAAjB;;AAaA,OAAI,CAAC,oBAAYhB,QAAQiB,GAApB,EAAyBC,MAA9B,EAAsC;AACrClB,cAAUmB,SAAV;AACA;;AAED,OAAIV,KAAKW,IAAL,IAAaX,KAAKY,IAAtB,EAA4B;AAC3BpB,MAAEqB,IAAF,CAAO/B,YAAYmB,QAAZ,EAAsBD,KAAKW,IAA3B,EAAiC,EAAjC,EAAqCX,KAAKY,IAA1C,EAAgDrB,OAAhD,CAAP;AACA,IAFD,MAEO;AACNC,QAAIA,EAAEsB,MAAF,CAAS,oBAAYxB,QAAQyB,OAApB,EAA6BP,GAA7B,CAAiC,UAACQ,GAAD;AAAA,YAC7ClC,YAAYmB,QAAZ,EAAsBe,GAAtB,EAA2B1B,QAAQ2B,UAAR,IAAsB,EAAjD,EAAqD3B,QAAQyB,OAAR,CAAgBC,GAAhB,CAArD,EAA2EzB,OAA3E,CAD6C;AAAA,KAAjC,CAAT,CAAJ;AAGA;AACD,GAzBD;;AA2BA,oBAAQ2B,GAAR,CAAY1B,CAAZ,EAAe2B,IAAf,CAAoB,YAAM;AACzB/B;AACA,GAFD,EAEGF,MAAMS,IAAN,CAAWyB,KAFd;AAGA,EA5CD;AA6CA,CA9CD","file":"gruntRemapIstanbul.js","sourcesContent":["/* jshint node: true */\n/* global Promise */\n\nconst loadCoverage = require('./loadCoverage');\nconst remap = require('./remap');\nconst writeReport = require('./writeReport');\nconst MemoryStore = require('istanbul/lib/store/memory');\n\nmodule.exports = function (grunt) {\n\tgrunt.registerMultiTask('remapIstanbul', function () {\n\t\tconst done = this.async();\n\t\tconst options = this.options();\n\t\tlet sources = new MemoryStore();\n\t\tlet p = [];\n\n\t\tfunction warn(message) {\n\t\t\tif (options.fail) {\n\t\t\t\tgrunt.fail.warn(message);\n\t\t\t} else {\n\t\t\t\tgrunt.log.error(message);\n\t\t\t}\n\t\t}\n\n\t\tthis.files.forEach((file) => {\n\t\t\tconst coverage = remap(loadCoverage(file.src, {\n\t\t\t\treadJSON: grunt.readJSON,\n\t\t\t\twarn,\n\t\t\t}), {\n\t\t\t\treadFile: grunt.readFile,\n\t\t\t\treadJSON: grunt.readJSON,\n\t\t\t\twarn,\n\t\t\t\tsources,\n\t\t\t\tbasePath: file.basePath,\n\t\t\t\tuseAbsolutePaths: options.useAbsolutePaths,\n\t\t\t\texclude: options.exclude,\n\t\t\t});\n\n\t\t\tif (!Object.keys(sources.map).length) {\n\t\t\t\tsources = undefined;\n\t\t\t}\n\n\t\t\tif (file.type && file.dest) {\n\t\t\t\tp.push(writeReport(coverage, file.type, {}, file.dest, sources));\n\t\t\t} else {\n\t\t\t\tp = p.concat(Object.keys(options.reports).map((key) =>\n\t\t\t\t\twriteReport(coverage, key, options.reportOpts || {}, options.reports[key], sources)\n\t\t\t\t));\n\t\t\t}\n\t\t});\n\n\t\tPromise.all(p).then(() => {\n\t\t\tdone();\n\t\t}, grunt.fail.fatal);\n\t});\n};\n"]}